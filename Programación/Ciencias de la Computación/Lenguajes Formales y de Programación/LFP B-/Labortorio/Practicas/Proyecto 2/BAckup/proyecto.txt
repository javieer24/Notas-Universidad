
app.py
from tkinter import *
from tkinter.ttk import Combobox
from tkinter import filedialog, messagebox


from Analizador import *
from Lexico import *

def Abrir():
    print('-- [ Abrir ] --')
    #Limpiar input
    inputtexto.delete('1.0', 'end')
    #Obtener ruta 
    rutaarchivo = filedialog.askopenfilename()
    print('Ruta archivo: "',rutaarchivo,'"')
    #Obtener Texto
    textoarchivo = ''
    try:
        with open(rutaarchivo, 'r') as archivo:
            textoarchivo = archivo.read()
    except Exception as e:
        print('• Error[Abrir()][Tk_ventana][CD001]: No se puede abrir el archivo \n')
        print(e)
    
    #Imprimir Texto
    if textoarchivo == '':
        print('No hay texto que procesar...')
    else:
        print('-------------------------')
        print(textoarchivo)
        print('-------------------------')
        #Añadir texto a input
        inputtexto.insert('1.0', str(textoarchivo))
    
    #Analizar
def Analizar():
    print('\n-- [ Analizar ] --')
    texto = str(inputtexto.get("1.0",END))
    txtconsola = analizador.analizadorBizData(texto)

    print('\n-----------[ CONSOLA ]------------')
    print(txtconsola)
    #Limpiar consola
    inputconsola.delete('1.0', 'end')
    #Agregar Texto
    inputconsola.insert('1.0', str(txtconsola))


raiz = Tk()
raiz.title('LFP Proyecto 2 | 202100081')
raiz.geometry('1150x600')

Label(raiz, pady=0,text='PROYECTO 2 | 202100081', font=("Consolas",14)).place(x=50,y=20)
Button(raiz,text='Abrir', bg='#DBE6A1', fg='#000000',font=("Consolas",12), command=Abrir).place(x=500,y=20, width=90, height= 35)
Button(raiz,text='Analizar', bg='#DBE6A1', fg='#000000',font=("Consolas",12), command=Analizar).place(x=610,y=20, width=120, height= 35)


opcionesarchivo = ['Reportes','Errores','Tokens','Arbol', 'Salir']
listaopciones = Combobox(raiz, text='Archivo', values = opcionesarchivo, font=("Consolas",11))
listaopciones.place(x=750,y=20, width=130, height= 35)
listaopciones.current(0)
#Switch case
def seleccion(event):
    print('Seleccionando ->', listaopciones.get())
    sel = listaopciones.get()
    if sel == 'Errores':
        print('Errores')
    elif sel == 'Tokens':
        print('Tokens')
    elif sel == 'Arbol':
        print('Arbol')
    elif sel == 'Salir':
        print('Salir')
#Ejecuta la opcion cuando cambia de seleccion
listaopciones.bind('<<ComboboxSelected>>',seleccion)

#Input
inputtexto = Text(raiz, padx=40, wrap='none', width=75, height=31,)
inputtexto.place(x=10,y=80)

#Etiquetas Input
labelnumeracion = Label(raiz, pady=0,text=' 1.\n 2.\n 3.\n 4.\n 5.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=82)
labelnumeracion = Label(raiz, pady=0,text=' 6.\n 7.\n 8.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=160)
labelnumeracion = Label(raiz, pady=0,text=' 9.\n10.\n11.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=210)
labelnumeracion = Label(raiz, pady=0,text='12.\n13.\n14.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=258)
labelnumeracion = Label(raiz, pady=0,text='15.\n16.\n17.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=305)
labelnumeracion = Label(raiz, pady=0,text='18.\n19.\n20.\n21.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=355)
labelnumeracion = Label(raiz, pady=0,text='22.\n23.\n24.\n25.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=420)
labelnumeracion = Label(raiz, pady=0,text='26.\n27.\n28.\n29.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=480)
labelnumeracion = Label(raiz, pady=0,text='30.\n31.', font=("Consolas",10), bg="#FFFFFF").place(x=12,y=545)

#ConsolaTkinter
inputconsola = Text(raiz, wrap=WORD, width=55, height=31,)
inputconsola.place(x=700,y=80)

raiz.mainloop()


analizador.py

from Lexico import *
from Sintactico import *
from Funciones import *

AnalizadorErrores = []


def analizadorBizData(texto):
    global AnalizadorErrores
    print('Analizando la información obtenida...')
    print(texto)
    #Pasa por el analizador  Lexico y Obtiene los Tokens
    tokens = lexico.GeTokens(texto)
    print(lexico.tokens)
    lexico.imprimirerroreslexicos()
    
    if len(tokens) >0:
       #Pasar al analizador Sintactico y obtener Estructuras
        instrucciones = erroresSintactico.GetInstrucciones(tokens)
        Sintactico.imprimirErrores()
        Sintactico.imprimirlistaSintactico()
        #[A]Obtener Errores
        #[A1]Obtener Errores Lexicos
        erroresLexicos = Sintactico.GetErrores()
        #[A2]Obtener Errores Sintacticos
        erroresSintactico = Sintactico.GetErrores()
        #[A3]Unir Errores
        nuevalista = unirdoslistas(erroresLexicos, erroresSintactico) 
        AnalizadorErrores = nuevalista
        # imprimirErrores()

        #Ejecutar instrucciones
        txtconsola = funciones.ejecutar(instrucciones)
        #funciones.imprimirInstrucciones()
        #Retornar informacion consola
        return txtconsola
        



def imprimirErrores():
    global AnalizadorErrores
    print('\n------------[ ERRORES ]----------------\n')
    for i in AnalizadorErrores:
        print(i)
    print('\n---------------------------------------')


def unirdoslistas(lista1, lista2):
    newlist = []
    for i in lista1:
        newlist.append(i)
    for j in lista2:
        newlist.append(j)

    return newlist    

funciones.py

listainstrucciones = []
txtresultado = ''


def imprimir(texto):
    print(texto)
    
    
def imprimirInstrucciones():
    print('\n##################### [ Instrucciones ] #############################')
    for i in listainstrucciones: 
        print(i)
        
def evaluarinstrucciones():
    global listainstrucciones, txtresultado
    c = 0
    maxiteraciones = len(listainstrucciones)
    print('\n##################### [ EVALUANDO... ] #############################')
    while c < maxiteraciones:
        instruccion = listainstrucciones[c] 
        print('Instruccion: ',instruccion[0], 'Contenido: ', instruccion[1])
        if instruccion[0] == 'imprimir':
            print('♦ Imprimir: ', instruccion[1])
            txtresultado +=  instruccion[1] + ''
        elif instruccion[0] == 'imprimirln':
            print('♦ Imprimirln: ', instruccion[1])
            txtresultado +=  instruccion[1]+'\n'
        c += 1
        
        
def ejecutar(oldlistainstrucciones):
    global listainstrucciones, txtresultado
    txtresultado = ''
    listainstrucciones = oldlistainstrucciones
    evaluarinstrucciones()


    return txtresultado

lexico.py
from tkinter import messagebox as MessageBox


tokens = []
linea = 1
columna = 1
listaerrores = []
listadocaracteresbuscados = ['{','}',':','[',']',',','(',')',';','=','"',"'",'#','_','-']
listaabecedario = ['A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z','Ñ','ñ']


def evaluartexto(texto):
    global tokens, linea, columna, listaerrores, listadocaracteresbuscados
    #IDtoken
    id = -1
    #Iterador
    c=0
    #Numero maximo de iteraciones
    maxiter = len(texto)
    while c < maxiter:
        id += 1
        #Obtener caracter
        caracter = texto[c]
        #Evaluar
        if caracter == '"' or caracter == "'":
            #Guardar inicio
            templinea = linea
            tempcolumna = columna
            #Evaluar si es un comentario multilinea
            caractersig = texto[c+1:c+2]
            if caractersig == '"' or caractersig == "'":
                caractersig2 = texto[c+2:c+3]
                if caractersig2 == '"' or caractersig2 == "'":
                    print('Comentario multilinea')
                    #obtener texto entre comillas
                    textoaevaluar = texto[c+3:]
                    string, pos, lineasextra, columnastring = obtenercomentariomultilinea(textoaevaluar, c,columna)
                    #Aumentar contador y columna
                    c = pos + 4
                    columna = columnastring
                    linea = linea + lineasextra
                    #Almacenar token
                    tokens.append([id,string,templinea,tempcolumna,'Comentario_multilinea',linea, columna])
                    print('token: ', string, ' linea:', linea,' columna: ',columna)
            else:
                #Almacena token
                tokens.append([id,caracter,linea,columna,'token'])
                print('token: ', caracter, ' linea:', linea,' columna: ',columna)
                columna += 1
                c += 1
                #obtener texto entre comillas
        elif caracter == '#':
            #Guardar inicio
            templinea = linea
            tempcolumna = columna
            #Si es un texto un posible token
            textoaevaluar = texto[c+1:]
            string, pos = obtenercomentario(textoaevaluar, c)
            #Aumentar contador y columna
            c = pos + 1
            columna = len(string) + 1
            #Almacenar token
            tokens.append([id,string,templinea,tempcolumna,'Comentario_simple',linea, columna])
            print('token: ', string, ' linea:', linea,' columna: ',columna)

        elif caracter == '\n':
            #Almacena token
            tokens.append([id,caracter,linea,columna,'espacio'])
            print('token: ', caracter, ' linea:', linea,' columna: ',columna)
            #Si es un Salto de linea | Aumenta la linea | Reinicia columnas
            linea += 1
            columna = 1
            c += 1
       
            #Si es algun tipo de espacio
            if caracter == '\t':
                #Si es un Tabulador | Aumenta la columna en 4
                columna += 4
            else:
                #Si es un espacio | Aumenta la columna
                columna += 1
            #Contador
            c += 1

        elif caracter in listadocaracteresbuscados:
            #Almacena token
            tokens.append([id,caracter,linea,columna,'token'])
            print('token: ', caracter, ' linea:', linea,' columna: ',columna)
            #Aumenta columna
            columna += 1
            #Contador
            c += 1

        elif caracter in listaabecedario:
            #Almacena token
            tokens.append([id,caracter,linea,columna,'token'])
            print('token: ', caracter, ' linea:', linea,' columna: ',columna)
            #Aumenta columna
            columna += 1
            #Contador
            c += 1

        elif caracter.isdigit():
            #Almacenar token
            tokens.append([id,caracter,linea, columna,'Numero'])
            print('token: ', caracter, ' linea:', linea,' columna: ',columna)
            #Aumenta columnas
            columna += 1
            #Contador
            c += 1

        else:
            #Caracter Desconocido
            print("\033[1;31;40m Error: caracter desconocido:", caracter," |Linea:",linea," |Columna:",columna,"\033[0m")
            #Almacenar error
            listaerrores.append([caracter, linea, columna,'error lexico'])
            #Aumentar contador y columna
            c += 1
            columna += 1



def obtenercomentariomultilinea(text, a, columna):
    #Texto
    string = ''
    lineasextra = 0
    #Evaluar caracter por carcater
    c = 0
    for newcaracter in text:
        columna += 1
        if newcaracter == "\n":
            lineasextra +=1
            columna = 1
        elif newcaracter == '"' or newcaracter == "'":
            caractersig = text[c+1:c+2]
            if caractersig == '"' or caractersig == "'":
                caractersig2 = text[c+2:c+3]
                if caractersig2 == '"' or caractersig2 == "'":
                    columna += 1
                    a += 2            
                    return [string, a, lineasextra, columna]
        #Forma el texto
        string += newcaracter
        a += 1
        c += 1
    print("Error: No se encontraron comillas doble que cerraran el texto.")



def obtenercomentario(text, a):
    #Texto
    string = ''
    #Evaluar caracter por carcater
    for caracter in text:
        if caracter == '\n':
            return [string, a]
        #Forma el texto
        string += caracter
        a += 1
    print("Error: No al obtenrecomentario().")



def obtenernumero(texto, a):
    numero = ""
    isDecimal = False
    for newcaracter in texto:
        if newcaracter.isdigit():
            numero += newcaracter
            a += 1
        elif newcaracter == "." and not isDecimal:
            numero += newcaracter
            a += 1
            isDecimal = True
        else:
            break
    if isDecimal:
        return [float(numero), a]
    return [int(numero), a]


def imprimirerroreslexicos():
    print('######### [ ERRORES LEXICOS ] #########\n')
    for i in listaerrores:
        print(i)


def imprimirlistatokens():
    print('######### [ TOKENS ] ##########\n')
    for i in tokens:
        print(i)

def GetErrores():
    return listaerrores


def GetTokens(texto):
    #Valida el tamaño del texto
    if len(texto) < 0:
        MessageBox.showerror('Error - lexico()','No hay informacion necesarioa para procesarlo')
        return
    #Reinicia los valores
    global tokens, linea, columna, listaerrores
    tokens = []
    linea = 1
    columna = 1
    listaerrores = []
    #Analiza el Texto
    evaluartexto(texto)
    
    
    return tokens


Sintactico.py

listaSintactico = []
listaErroresSintactico = []
listatokens = []
listasimbolos = ['{','}',':','[',']',',','(',')',';','=','"',"'",'#','_','-']
listaletras = ['A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z','Ñ','ñ']



def imprimirErrores():
    print('\n############[ Errores | Sintactico]#################\n')
    for i in listaErroresSintactico: 
        print(i)


def imprimirlistaSintactico():
    print('\n############[ Lista Sintactico | Instrucciones]#################\n')
    for i in listaSintactico:
        print(i)


def obtenertexto(a):
    global listatokens
    inicio = a
    texto = ''
    #-----
    maxiteraciones = len(listatokens)
    while a < maxiteraciones:
        token = listatokens[a][1]
        if token == '"' or token == "'":
            a += 1
            return [texto,a]
        else:
            texto += token
            a += 1


def fininstruccion(a,tokenesperado):
    global listatokens, listaErroresSintactico
    inicio = a
    maxiteraciones = len(listatokens)
    while a < maxiteraciones:
        token = listatokens[a][1]
        if token == ';' or token == '\n':
            a += 1
            #Agregar a errores
            listaErroresSintactico.append([listatokens[inicio][1],str(tokenesperado),listatokens[inicio][1],listatokens[inicio][2],'error Sintactico',listatokens[inicio][1],listatokens[a-1][2]])
            return a
        else:
            a += 1


def ErrorAFDTextoentrecomillas(a,tokenesperado):
    global listatokens, listaErroresSintactico
    inicio = a
    maxiteraciones = len(listatokens)
    while a < maxiteraciones:
        token = listatokens[a][1]
        if token == ')' or token == ';' or token == '\n':
            a += 1
            #Agregar a errores
            listaErroresSintactico.append([listatokens[a-1][1],str(tokenesperado),listatokens[a-1][1],listatokens[a-2][2],'error Sintactico',listatokens[a-1][1],listatokens[a-1][2]])
            return a
        else:
            a += 1



def AFDTextoentrecomillas(c):
    global listatokens
    #iterador
    maxiteraciones = len(listatokens)
    #TEXTO
    texto = ''
    #Estados
    #q1,q2,q3,q4,q5
    inicio = 0
    final = 5
    estado = inicio

    if listatokens[c][1] == '"':
        estado = 1
        c+=1
        while c < maxiteraciones:
            #Token
            token = listatokens[c][1]
            if token == ')' or token == ';' or token == '\n':
                return False
            elif token == '"':
                estado = 5
                c+=1
                return True
            elif token in listaletras:
                estado = 2
                c+=1
            elif token in listasimbolos:
                estado = 3
                c+=1
            elif token.isdigit():
                estado = 4
                c+=1
            else:
                c+=1
        
        return False

def getTextoentrecomillas(c):
    global listatokens
    #iterador
    maxiteraciones = len(listatokens)
    #TEXTO
    texto = ''
    if listatokens[c][1] == '"':
        c+=1
        while c < maxiteraciones:
            #Token
            token = listatokens[c][1]
            if token == '"':
                c+=1
                return texto, c
            elif token in listaletras or token in listasimbolos:
                #Añadir token
                texto += token
                c+=1
            else:
                c+=1



def evaluartokens(tokens):
    global listaSintactico, listatokens
    listatokens = tokens
    print('\n####### [ EVALUAR TOKENS ] #######')
    #Iterador
    c = 0
    maxiteraciones = len(tokens)
    while c < maxiteraciones:
        Token = tokens[c][1]
        #Ignorar Comentarios
        if tokens[c][4] == 'Comentario_multilinea' or tokens[c][3] == 'Comentario_simple':
            c += 1    
        elif Token == 'i':
            if tokens[c+1][1] == 'm':
                if tokens[c+2][1] == 'p':
                    if tokens[c+3][1] == 'r':
                        if tokens[c+4][1] == 'i':
                            if tokens[c+5][1] == 'm':
                                if tokens[c+6][1] == 'i':
                                    if tokens[c+7][1] == 'r':
                                        if tokens[c+8][1] == '(':
                                            if tokens[c+9][1] == '"':
                                                AFDTexto = AFDTextoentrecomillas(c+9)
                                                print("AFD:", AFDTexto)
                                                if AFDTexto == True:
                                                    # texto, a =getTextoentrecomillas(c+9)
                                                    #ObtenerTexto
                                                    texto, a = obtenertexto(c+10)
                                                    print('TEXTO: ', texto, ' A:',a)
                                                    #cambiar numero iteracion
                                                    c = a 
                                                    if tokens[c][1] == ')':
                                                        if tokens[c+1][1] == ';':
                                                            c += 2
                                                            listaSintactico.append(['imprimir',texto])
                                                        else:
                                                            c = fininstruccion(c+1,';')
                                                    else:
                                                        c = fininstruccion(c,')')
                                                else:
                                                    c = ErrorAFDTextoentrecomillas(c+10,'"')
                                                    c = fininstruccion(c,')')
                                            else:
                                                c = fininstruccion(c+9,'"')
                                        else:
                                            if tokens[c+8][1] == 'l':
                                                if tokens[c+9][1] == 'n':
                                                    if tokens[c+10][1] == '(':
                                                        if tokens[c+11][1] == '"':
                                                            AFDTexto = AFDTextoentrecomillas(c+11)
                                                            print("AFD:", AFDTexto)
                                                            if AFDTexto == True:
                                                                #ObtenerTexto
                                                                texto, a = obtenertexto(c+12)
                                                                print('TEXTO: ', texto, ' A:',a)
                                                                c = a
                                                                if tokens[c][1] == ')':
                                                                    if tokens[c+1][1] == ';':
                                                                        print('imprimirln: ', texto)
                                                                        listaSintactico.append(['imprimirln',texto])
                                                                    else:
                                                                        c = fininstruccion(c+1,';')
                                                                else:
                                                                    c = fininstruccion(c,')')
                                                            else:
                                                                c = ErrorAFDTextoentrecomillas(c+10,'"')
                                                                c = fininstruccion(c,')')
                                                        else:
                                                            c = fininstruccion(c+11,'"')
                                                    else:
                                                        c = fininstruccion(c+10,'(')
                                                else:
                                                    c = fininstruccion(c+9,'n')
                                            else:
                                                c = fininstruccion(c+8,'( | l ')
                                    else:
                                        c = fininstruccion(c+7,'r')
                                else:
                                    c = fininstruccion(c+6,'i')
                            else:
                                c = fininstruccion(c+5,'m')
                        else:
                            c = fininstruccion(c+4,'i')
                    else:
                        c = fininstruccion(c+3,'r')
                else:
                    c = fininstruccion(c+2,'p')
            else:
                c = fininstruccion(c+1,'m')
        else:
            print(tokens[c])
            c += 1
    
def GetErrores():
    return listaErroresSintactico


def GetInstrucciones(tokens):
    global listaSintactico, listaErroresSintactico
    listaSintactico = []
    listaErroresSintactico = []

    #Evaluar tokens
    evaluartokens(tokens)

    return listaSintactico



y este fue el error que me dio: 
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.1776.0_x64__qbz5n2kfra8p0\Lib\tkinter\__init__.py", line 1948, in __call__
    return self.func(*args)
           ^^^^^^^^^^^^^^^^
  File "c:\Users\javie\Escritorio\Users\Usuarios\U\Estudio\USAC\Semestres\2023\Semestre\2do Semestre\Cursos\LFP_LAB\Practicas\Proyecto 2\LFP_S2_2023_Proyecto2_202100081\app.py", line 39, in Analizar
    txtconsola = analizador.analizadorBizData(texto)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\javie\Escritorio\Users\Usuarios\U\Estudio\USAC\Semestres\2023\Semestre\2do Semestre\Cursos\LFP_LAB\Practicas\Proyecto 2\LFP_S2_2023_Proyecto2_202100081\Analizador\analizador.py", line 13, in analizadorBizData
    tokens = lexico.GeTokens(texto)
             ^^^^^^^^^^^^^^^
AttributeError: module 'Lexico.lexico' has no attribute 'GeTokens'

